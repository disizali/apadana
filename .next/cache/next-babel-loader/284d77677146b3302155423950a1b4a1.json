{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar _jsxFileName = \"/Users/imac/Desktop/APADANA/components/Earth.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nexport default class Earth extends Component {\n  componentDidMount() {\n    //(function(){\n    var AMOUNT = 200,\n        d = 25,\n        R = 200,\n        adjustment = true,\n        adaptive = true,\n        obliquity = 23 / 180 * 3.14,\n        roV1 = .0022,\n        roV2 = -.0005,\n        ro1 = 0,\n        ro2 = 0,\n        canvas = '#earth',\n        color = '#420236',\n        fogC = '#722779',\n        T_earth = 'https://mapplix.github.io/earth/earth.png';\n    var camera, scene, renderer;\n    var positions = [],\n        particles,\n        particle,\n        count = 0,\n        dpr,\n        lastW,\n        W = window.innerWidth,\n        H = window.innerHeight,\n        aspect = W / H,\n        vMin = Math.min(W, H);\n    var mouseX = 0,\n        mouseY = 0,\n        x0,\n        y0;\n    var lookAt = new THREE.Vector3(0, 0, 0),\n        canvas = document.querySelector(canvas);\n    renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      antialias: true,\n      canvas: canvas\n    }); //\n\n    renderer.setSize(W, H); //renderer.context.getExtension('OES_standard_derivatives');\n\n    camera = new THREE.PerspectiveCamera(18, aspect, 1, 10000);\n    scene = new THREE.Scene();\n    var Emap = new THREE.TextureLoader().load(T_earth);\n    Emap.anisotropy = Math.min(8, renderer.capabilities.getMaxAnisotropy()) || 1;\n    var Wmaterial = new THREE.MeshStandardMaterial({\n      onBeforeCompile: function (sh) {\n        sh.vertexShader = '\\\n#define MYSHADER\\n\\\nattribute float center, bright;\\n\\\nvarying vec3 vCenter, vPos, vV0, vV1, vV2;\\n\\\nvarying float vBright;\\n\\\n' + sh.vertexShader.replace(/}\\s*$/, '\\\nvBright=bright;\\n\\\nint c=int(center);\\n\\\nvCenter = vec3(c==0, c==1, c==2);\\n\\\nvPos=position;\\n\\\ngl_Position = projectionMatrix * modelViewMatrix * vec4(vPos, 1);\\n\\\nvV0=vCenter[0]*vPos;\\n\\\nvV1=vCenter[1]*vPos;\\n\\\nvV2=vCenter[2]*vPos;\\n\\\n}\\\t\t\t');\n        sh.fragmentShader = '\\\n#define MYSHADER\\n\\\nvarying vec3 vCenter, vPos, vV0, vV1, vV2;\\n\\\nvarying float vBright;\\n\\\n' + sh.fragmentShader.replace('#include <alphamap_fragment>', '\\\n#include <alphamap_fragment>\\n\\\nvec3 d = fwidth( vCenter );\\n\\\nvec3 a3 = smoothstep( vec3(0.0), d * 1.4, vCenter+0.4*d-1.0/fogDepth );\\n\\\nfloat scale = dot(normalize(vViewPosition), vNormal);\\n\\\nscale = 1.0-scale*scale;\\n\\\nfloat dist = distance(vPos, vV0.xyz/vCenter.x);\\n\\\ndist = min(dist, distance(vPos, vV1.xyz/vCenter.y));\\n\\\ndist = min(dist, distance(vPos, vV2.xyz/vCenter.z));\\n\\\nfloat b3 = smoothstep(1.5, 1.8, dist-1.5*scale*scale );\\n\\\nfloat edgeFactorTri=min(b3,min( min( a3.x, a3.y ), a3.z ));\\n\\\ndiffuseColor.a *= mix( 1.0,  0.0, edgeFactorTri );\\n\\\nfloat dissipation=' + (posZ + .5 * R + .01) + ';\\n\\\ndiffuseColor.a *= smoothstep( 20.0,  0.0, fogDepth-dissipation );\\n\\\n\\\t\t\t').replace('\t#include <fog_fragment>', '\\\nfloat lVc=length(vCenter);\\n\\\ngl_FragColor.rgb *= smoothstep( ' + R * .8888 + ', ' + R * 1.201 + ', fogDepth );\\n\\\ngl_FragColor.rgb = mix( gl_FragColor.rgb, vec3(3), (.1*lVc+pow(lVc,8.0))*vBright );\\n\\\n#include <fog_fragment>\\\n\\\t\t\t'); //console.log(sh, sh.vertexShader, sh.fragmentShader);\n      },\n      roughness: .5,\n      metalness: .964,\n      envMapIntensity: 5,\n      emissive: 0,\n      // refractionRatio: -0.12,\n      transparent: true,\n      alphaTest: 0.05\n    }); //, opacity: 0\n\n    Wmaterial.color.set(fogC);\n    Wmaterial.side = 2;\n    Wmaterial.extensions = {\n      derivatives: 1\n    };\n    var geometry = new THREE.IcosahedronGeometry(R, 3); //OctahedronGeometry\n\n    for (var i = 0; i < geometry.vertices.length; i++) {\n      geometry.vertices[i].applyEuler(new THREE.Euler(Math.random() * .06, Math.random() * .06, Math.random() * .06));\n    }\n\n    var bGeometry = new THREE.BufferGeometry().fromGeometry(geometry);\n    var position = bGeometry.attributes.position;\n    var centers = new Int8Array(position.count);\n    var brights = new Float32Array(position.count);\n    var points = [],\n        activePoints = [],\n        vCount = geometry.vertices.length,\n        dCount = 0,\n        dMid = 0;\n\n    for (var i = 0, l = position.count; i < l; i++) {\n      var c = centers[i] = i % 3,\n          j = (i - c) / 3;\n      brights[i] = 0;\n      if (i < vCount) points[i] = {\n        siblings: [],\n        distances: [],\n        indexes: [],\n        brightness: 0,\n        v: 0,\n        a: 0,\n        f: 0,\n        dr: 0,\n        r: 1\n      };\n    }\n\n    function addSiblings(a, b, one) {\n      if (points[a].siblings.indexOf(points[b]) < 0) {\n        points[a].pos = geometry.vertices[a].clone();\n        points[a].siblings.push(points[b]);\n        var d = geometry.vertices[a].distanceTo(geometry.vertices[b]);\n        points[a].distances.push(d);\n        dMid += d;\n        dCount++;\n      }\n\n      if (!one) addSiblings(b, a, 1);\n    }\n\n    geometry.faces.forEach(function (face, i) {\n      addSiblings(face.a, face.b);\n      addSiblings(face.a, face.c);\n      addSiblings(face.c, face.b);\n      points[face.a].indexes.push(i * 3);\n      points[face.b].indexes.push(i * 3 + 1);\n      points[face.c].indexes.push(i * 3 + 2);\n    });\n    dMid /= dCount;\n    var ttl = 10;\n\n    (function setActive(n) {\n      if (!n) return;\n\n      var i = _parseInt(Math.random() * vCount);\n\n      if (geometry.vertices[i].z < -100) setActive();else points[i].isActive = ttl, activePoints.push(points[i]);\n      setActive(n - 1);\n    })(10);\n\n    bGeometry.addAttribute('center', new THREE.BufferAttribute(centers, 1));\n    bGeometry.addAttribute('bright', new THREE.BufferAttribute(brights, 1));\n    var Ematerial = Wmaterial.clone();\n    Ematerial.alphaMap = Emap;\n    Ematerial.transparent = false;\n    Ematerial.side = 0;\n    var cubeCamera = new THREE.CubeCamera(1, 2 * R, 256);\n    cubeCamera.position.z = .47 * R;\n    Ematerial.envMap = cubeCamera.renderTarget.texture;\n    Ematerial.envMap.minFilter = THREE.LinearMipMapLinearFilter;\n    Ematerial.envMap.mapping = THREE.CubeReflectionMapping;\n    var Earth = new THREE.Mesh(new THREE.IcosahedronGeometry(R * .77, 3), Ematerial);\n    var wGeometry = geometry.clone();\n    particles = new THREE.Group();\n    world = new THREE.Group();\n    var Net = new THREE.Mesh(bGeometry, Wmaterial);\n    particles.add(Net, Earth); //new THREE.Points(geometry, Pmaterial), \n    //particles.rotation.order='YXZ'\n\n    world.add(particles);\n    scene.add(world); // POSITIONS :\n\n    var posZ = 1700; //distance to camera\n    //scene.position.set(-12,54,0);\n    //camera.position.y=camera.position.z=2000\n\n    scene.fog = new THREE.Fog(fogC, posZ - R / 2, posZ + R);\n    hLight = new THREE.HemisphereLight('#fff', 0, 23);\n    world.add(hLight);\n    hLight.position.set(0, 0, 1); // interactions\n\n    var dx,\n        dy = dx = x0 = y0 = 0,\n        active,\n        abc = ['a', 'b', 'c'],\n        movedPoints = [],\n        activeF = [],\n        ready,\n        raycaster = new THREE.Raycaster(),\n        mouse = new THREE.Vector2();\n\n    window.getWpos = function () {\n      return [scene.position, scene.rotation, camera];\n    };\n\n    function interact() {\n      mouse.x = x0 / W * 2 - 1;\n      mouse.y = -(y0 / H) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      movedPoints.forEach(function (point, i) {\n        point.f = 0;\n      });\n      activeF = [];\n      if (!active) return;\n      var inters = raycaster.intersectObject(Net)[0],\n          ind,\n          vert;\n      if (!inters) return;\n      point = Net.worldToLocal(inters.point.clone());\n\n      for (var i = 0; i < 3; i++) {\n        ind = inters.face[abc[i]];\n        if (!points.some(function (p, i) {\n          return p.indexes.indexOf(ind) >= 0 && (vert = i + '');\n        })) return;\n        activeF[vert] = Math.max(1 - point.distanceTo(points[vert].pos) / dMid, 0) * 100;\n      } // console.log(activeF, points[vert]);\n\n    }\n\n    canvas.onpointerdown = canvas.onmousedown = canvas.ontouchstart = function (e) {\n      active = e.changedTouches ? e.changedTouches[0] : e;\n      x0 = active.clientX;\n      y0 = active.clientY;\n      e.preventDefault();\n      interact();\n    };\n\n    onpointermove = onmousemove = ontouchmove = function (e) {\n      if (!active || !ready) return;\n\n      if (!e.buttons) {\n        active = false;\n        return;\n      }\n\n      var touches = e.changedTouches;\n      if (active.identifier !== undefined && e.type != 'touchmove') return;\n\n      if (touches) {\n        if (touches[0].identifier == active.identifier) e = touches[0];else return;\n      } else {\n        e.preventDefault();\n      }\n\n      ; //if (e.type==mousemove && !e.which) return\n\n      dx = (5 * dx + x0 - (x0 = e.clientX)) / 6;\n      dy = (5 * dy + y0 - (y0 = e.clientY)) / 6; //console.log(e.type, active.identifier, dx, x0)\n\n      interact();\n      ready = 0;\n    };\n\n    onmouseup = onpointerup = ontouchup = ontouchcancel = onpointercancel = onblur = function (e) {\n      active = false; //console.log()\n\n      interact();\n    };\n\n    var t0 = new Date() * 1,\n        dMax = 80,\n        dMin = 1000 / 33,\n        dT = 1000 / 50,\n        af,\n        Pactive = [],\n        m = 3000000,\n        k = 400,\n        k0 = 1,\n        f0 = .01,\n        fv = 1000,\n        posArr = bGeometry.attributes.position.array,\n        pUp = 0,\n        pDn = [],\n        flTimer = [],\n        vecTest = new THREE.Vector3(),\n        transStart,\n        pLast,\n        transactions = [];\n    requestAnimationFrame(function animate() {\n      requestAnimationFrame(animate);\n      var t = new Date() * 1,\n          dt = t - t0;\n      if (dt < dMin) return; // !Eh || \n\n      dt = Math.min(dt, dMax);\n      t0 = t;\n      var dd = dt / dT;\n      var pos = canvas.getBoundingClientRect(),\n          dY = window.innerHeight - document.documentElement.getBoundingClientRect().bottom;\n      if (pos.bottom <= 0 || pos.top >= window.innerHeight) return;\n\n      if (dpr != (dpr = window.devicePixelRatio) || W != (W = window.innerWidth) || H != (H = window.innerHeight)) {\n        vMin = Math.min(W, H);\n        renderer.setSize(W, H);\n        renderer.setPixelRatio(dpr);\n        camera.aspect = W / H;\n        camera.updateProjectionMatrix();\n      }\n\n      var addPoints = [];\n      activePoints.forEach(function (point, i) {\n        var b = point.brightness;\n\n        if (point.isActive && (b += (point.speed || .3) * (b + .05) * dd) > 1) {\n          //\n          point.siblings.forEach(function (s, j) {\n            if (activePoints.indexOf(s) > -1) return; //console.log(11);\n\n            s.speed = 3.7 / point.distances[j]; //s.from=point;\n\n            if (s.isActive = Math.random() > .6) activePoints.push(s);\n          });\n          point.isActive = 0;\n        } else if (!point.isActive && (b -= b * .056 * dd) < 0.005) {\n          b = 0; //point.from=\n\n          activePoints.splice(i, 1);\n        }\n\n        point.brightness = b;\n        point.indexes.forEach(function (i) {\n          brights[i] = b;\n        });\n      });\n      points.forEach(function (point, i) {\n        var d = 0;\n        point.siblings.forEach(function (s, j) {\n          d += s.dr;\n        });\n        d = d / point.siblings.length - point.dr;\n        point.f = -(activeF[i] || 0) * .4 + d * k - point.dr * k0 * (1 + Math.abs(1 - point.r)) - point.v * fv;\n        point.v += point.f * dt / m;\n        point.r = 1 + point.dr;\n        point.indexes.forEach(function (j) {\n          //brights[i]+=point.f; return;\n          posArr[j *= 3] = point.r * point.pos.x;\n          posArr[j + 1] = point.r * point.pos.y;\n          posArr[j + 2] = point.r * point.pos.z;\n        });\n      });\n      points.forEach(function (point, i) {\n        if (!point.v) return;\n        var dd = point.v * dt;\n        point.dr += dd;\n      });\n      bGeometry.attributes.bright.needsUpdate = true;\n      bGeometry.attributes.position.needsUpdate = true;\n      camera.position.z += (posZ - camera.position.z) * .085 * dd;\n      ro1 += roV1 * dd;\n      ro2 += roV2 * dd;\n      particles.rotation.set(0, 0, 0);\n      particles.rotateY(ro2).rotateX(obliquity).rotateY(ro1);\n      particles.rotation.y -= .0009;\n      dx *= 1 - .03 * dd;\n      dy *= 1 - .03 * dd;\n      ro2 -= dx * .002; //+(W/2-y0)*(W/2-x0)*dy/vMin*.00004;\n\n      world.rotation.x -= dy * .002;\n      var sro = world.rotation.x *= .92;\n      Net.applyMatrix(new THREE.Matrix4().getInverse(particles.matrixWorld).multiply(new THREE.Matrix4().makeRotationFromEuler(new THREE.Euler(-dy * .003, -dx * .002, 0))).multiply(particles.matrixWorld) //new THREE.Matrix4()\n      );\n      Earth.visible = !1;\n      scene.scale.set(.33, .33, .65); //.applyEuler(new THREE.Euler(-sro,0,0))\n\n      cubeCamera.update(renderer, scene);\n      Earth.visible = !0;\n      scene.scale.set(1, 1, 1);\n      particles.matrixWorldNeedsUpdate = true;\n      renderer.render(scene, camera);\n      ready = 1;\n    }); //})()\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, __jsx(\"canvas\", {\n      id: \"earth\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/imac/Desktop/APADANA/components/Earth.jsx"],"names":["React","Component","Earth","componentDidMount","AMOUNT","d","R","adjustment","adaptive","obliquity","roV1","roV2","ro1","ro2","canvas","color","fogC","T_earth","camera","scene","renderer","positions","particles","particle","count","dpr","lastW","W","window","innerWidth","H","innerHeight","aspect","vMin","Math","min","mouseX","mouseY","x0","y0","lookAt","THREE","Vector3","document","querySelector","WebGLRenderer","alpha","antialias","setSize","PerspectiveCamera","Scene","Emap","TextureLoader","load","anisotropy","capabilities","getMaxAnisotropy","Wmaterial","MeshStandardMaterial","onBeforeCompile","sh","vertexShader","replace","fragmentShader","posZ","roughness","metalness","envMapIntensity","emissive","transparent","alphaTest","set","side","extensions","derivatives","geometry","IcosahedronGeometry","i","vertices","length","applyEuler","Euler","random","bGeometry","BufferGeometry","fromGeometry","position","attributes","centers","Int8Array","brights","Float32Array","points","activePoints","vCount","dCount","dMid","l","c","j","siblings","distances","indexes","brightness","v","a","f","dr","r","addSiblings","b","one","indexOf","pos","clone","push","distanceTo","faces","forEach","face","ttl","setActive","n","z","isActive","addAttribute","BufferAttribute","Ematerial","alphaMap","cubeCamera","CubeCamera","envMap","renderTarget","texture","minFilter","LinearMipMapLinearFilter","mapping","CubeReflectionMapping","Mesh","wGeometry","Group","world","Net","add","fog","Fog","hLight","HemisphereLight","dx","dy","active","abc","movedPoints","activeF","ready","raycaster","Raycaster","mouse","Vector2","getWpos","rotation","interact","x","y","setFromCamera","point","inters","intersectObject","ind","vert","worldToLocal","some","p","max","onpointerdown","onmousedown","ontouchstart","e","changedTouches","clientX","clientY","preventDefault","onpointermove","onmousemove","ontouchmove","buttons","touches","identifier","undefined","type","onmouseup","onpointerup","ontouchup","ontouchcancel","onpointercancel","onblur","t0","Date","dMax","dMin","dT","af","Pactive","m","k","k0","f0","fv","posArr","array","pUp","pDn","flTimer","vecTest","transStart","pLast","transactions","requestAnimationFrame","animate","t","dt","dd","getBoundingClientRect","dY","documentElement","bottom","top","devicePixelRatio","setPixelRatio","updateProjectionMatrix","addPoints","speed","s","splice","abs","bright","needsUpdate","rotateY","rotateX","sro","applyMatrix","Matrix4","getInverse","matrixWorld","multiply","makeRotationFromEuler","visible","scale","update","matrixWorldNeedsUpdate","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Earth extends Component {\n    componentDidMount() {\n        //(function(){\n\tvar AMOUNT=200, d=25, R=200, adjustment=true, adaptive=true,\n    obliquity=23/180*3.14, roV1=.0022, roV2=-.0005, ro1=0, ro2=0,\n    canvas='#earth', color='#420236', fogC='#722779', T_earth='https://mapplix.github.io/earth/earth.png';\n\nvar camera, scene, renderer;\n\nvar positions=[], particles, particle, count = 0, dpr, lastW,\nW=window.innerWidth, H=window.innerHeight, aspect=W / H, vMin=Math.min(W,H);\n\nvar mouseX = 0, mouseY = 0, x0, y0;\nvar lookAt=new THREE.Vector3(0, 0, 0), canvas=document.querySelector(canvas); \n\nrenderer = new THREE.WebGLRenderer({alpha:true, antialias:true, canvas: canvas});//\nrenderer.setSize( W, H );\n//renderer.context.getExtension('OES_standard_derivatives');\ncamera = new THREE.PerspectiveCamera( 18, aspect, 1, 10000 );\nscene = new THREE.Scene();\nvar Emap = (new THREE.TextureLoader()).load( T_earth );\nEmap.anisotropy=Math.min(8, renderer.capabilities.getMaxAnisotropy())||1;\nvar Wmaterial = new THREE.MeshStandardMaterial({\n    onBeforeCompile: function(sh){\n        sh.vertexShader='\\\n#define MYSHADER\\n\\\nattribute float center, bright;\\n\\\nvarying vec3 vCenter, vPos, vV0, vV1, vV2;\\n\\\nvarying float vBright;\\n\\\n'\t\t\t+sh.vertexShader.replace(/}\\s*$/, '\\\nvBright=bright;\\n\\\nint c=int(center);\\n\\\nvCenter = vec3(c==0, c==1, c==2);\\n\\\nvPos=position;\\n\\\ngl_Position = projectionMatrix * modelViewMatrix * vec4(vPos, 1);\\n\\\nvV0=vCenter[0]*vPos;\\n\\\nvV1=vCenter[1]*vPos;\\n\\\nvV2=vCenter[2]*vPos;\\n\\\n}\\\t\t\t');\n        sh.fragmentShader='\\\n#define MYSHADER\\n\\\nvarying vec3 vCenter, vPos, vV0, vV1, vV2;\\n\\\nvarying float vBright;\\n\\\n'\t\t\t+sh.fragmentShader.replace('#include <alphamap_fragment>', '\\\n#include <alphamap_fragment>\\n\\\nvec3 d = fwidth( vCenter );\\n\\\nvec3 a3 = smoothstep( vec3(0.0), d * 1.4, vCenter+0.4*d-1.0/fogDepth );\\n\\\nfloat scale = dot(normalize(vViewPosition), vNormal);\\n\\\nscale = 1.0-scale*scale;\\n\\\nfloat dist = distance(vPos, vV0.xyz/vCenter.x);\\n\\\ndist = min(dist, distance(vPos, vV1.xyz/vCenter.y));\\n\\\ndist = min(dist, distance(vPos, vV2.xyz/vCenter.z));\\n\\\nfloat b3 = smoothstep(1.5, 1.8, dist-1.5*scale*scale );\\n\\\nfloat edgeFactorTri=min(b3,min( min( a3.x, a3.y ), a3.z ));\\n\\\ndiffuseColor.a *= mix( 1.0,  0.0, edgeFactorTri );\\n\\\nfloat dissipation='+(posZ+.5*R+.01)+';\\n\\\ndiffuseColor.a *= smoothstep( 20.0,  0.0, fogDepth-dissipation );\\n\\\n\\\t\t\t').replace('\t#include <fog_fragment>', '\\\nfloat lVc=length(vCenter);\\n\\\ngl_FragColor.rgb *= smoothstep( '+R*.8888+', '+R*1.201+', fogDepth );\\n\\\ngl_FragColor.rgb = mix( gl_FragColor.rgb, vec3(3), (.1*lVc+pow(lVc,8.0))*vBright );\\n\\\n#include <fog_fragment>\\\n\\\t\t\t');\n        //console.log(sh, sh.vertexShader, sh.fragmentShader);\n    },\n    roughness: .5,\n    metalness: .964,\n    envMapIntensity:5,\n    emissive: 0,\n    // refractionRatio: -0.12,\n    transparent: true, alphaTest: 0.05\n});//, opacity: 0\nWmaterial.color.set(fogC);\nWmaterial.side=2;\nWmaterial.extensions={derivatives: 1};\nvar geometry = new THREE.IcosahedronGeometry(R,3);//OctahedronGeometry\n\nfor ( var i = 0; i < geometry.vertices.length; i ++ ) {\n    geometry.vertices[i].applyEuler(new THREE.Euler(Math.random()*.06,Math.random()*.06,Math.random()*.06))\n}\nvar bGeometry=(new THREE.BufferGeometry).fromGeometry(geometry);\nvar position = bGeometry.attributes.position;\nvar centers = new Int8Array( position.count );\nvar brights = new Float32Array ( position.count );\nvar points=[], activePoints=[], vCount=geometry.vertices.length, dCount=0, dMid=0;\n\nfor ( var i = 0, l = position.count; i < l; i ++ ) {\n    var c =centers[i]= i % 3, j=(i-c)/3;\n    brights[i]=0;\n    if (i<vCount) points[i]={siblings:[], distances:[], indexes:[], brightness:0, v:0, a:0, f:0, dr:0, r:1};\n}\nfunction addSiblings(a,b,one){\n    if (points[a].siblings.indexOf(points[b])<0) {\n        points[a].pos=geometry.vertices[a].clone();\n        points[a].siblings.push(points[b]);\n        var d=geometry.vertices[a].distanceTo(geometry.vertices[b]);\n        points[a].distances.push(d);\n        dMid+=d; dCount++;\n    }\n    if (!one) addSiblings(b,a,1)\n}\ngeometry.faces.forEach(function(face, i){\n    addSiblings(face.a,face.b);\n    addSiblings(face.a,face.c);\n    addSiblings(face.c,face.b);\n    points[face.a].indexes.push(i*3);\n    points[face.b].indexes.push(i*3+1);\n    points[face.c].indexes.push(i*3+2);\n});\ndMid/=dCount;\nvar ttl=10;\n(function setActive(n){\n    if (!n) return\n    var i=parseInt(Math.random()*vCount)\n    if (geometry.vertices[i].z<-100) setActive()\n    else points[i].isActive=ttl, activePoints.push(points[i]);\n    setActive(n-1) \n})(10);\n\nbGeometry.addAttribute( 'center', new THREE.BufferAttribute( centers, 1 ) );\nbGeometry.addAttribute( 'bright', new THREE.BufferAttribute( brights, 1 ) );\n\nvar Ematerial = Wmaterial.clone();\nEmaterial.alphaMap=Emap; Ematerial.transparent=false; Ematerial.side=0;\nvar cubeCamera = new THREE.CubeCamera( 1, 2*R, 256 );\ncubeCamera.position.z=.47*R\nEmaterial.envMap=cubeCamera.renderTarget.texture;\nEmaterial.envMap.minFilter = THREE.LinearMipMapLinearFilter; \nEmaterial.envMap.mapping=THREE.CubeReflectionMapping;\nvar Earth = new THREE.Mesh(new THREE.IcosahedronGeometry(R*.77, 3), Ematerial)\nvar wGeometry=geometry.clone();\nparticles = new THREE.Group();\nworld = new THREE.Group();\nvar Net=new THREE.Mesh(bGeometry, Wmaterial);\nparticles.add(Net, Earth);//new THREE.Points(geometry, Pmaterial), \n//particles.rotation.order='YXZ'\nworld.add(particles);\nscene.add(world);\n// POSITIONS :\nvar posZ = 1700; //distance to camera\n//scene.position.set(-12,54,0);\n\n//camera.position.y=camera.position.z=2000\n\nscene.fog=new THREE.Fog(fogC, posZ-R/2, posZ+R);\nhLight=new THREE.HemisphereLight('#fff', 0, 23)\nworld.add(hLight);\nhLight.position.set(0,0,1)\n\n// interactions\nvar dx, dy=dx=x0=y0=0, active, abc=['a', 'b', 'c'], movedPoints=[], activeF=[], ready,\n    raycaster=new THREE.Raycaster(),\n    mouse = new THREE.Vector2();\nwindow.getWpos=function(){\n    return [scene.position, scene.rotation, camera]\n}\nfunction interact() {\n    mouse.x = ( x0 / W ) * 2 - 1;\n    mouse.y = - ( y0 / H ) * 2 + 1;\n    raycaster.setFromCamera( mouse, camera );\n    movedPoints.forEach(function(point, i){point.f=0});\n    activeF=[];\n    if (!active) return;\n    var inters=raycaster.intersectObject(Net)[0], ind, vert;\n    if (!inters) return;\n    point=Net.worldToLocal(inters.point.clone());\n    for (var i = 0; i < 3; i++) {\n        ind=inters.face[abc[i]];\n        if ( !points.some(function(p, i){return p.indexes.indexOf(ind)>=0 && (vert=i+'') }) ) return;\n        activeF[vert]=Math.max(1-point.distanceTo(points[vert].pos)/dMid, 0)*100\n    }\n    // console.log(activeF, points[vert]);\n}\ncanvas.onpointerdown=canvas.onmousedown=canvas.ontouchstart=function(e){\n    active=e.changedTouches?e.changedTouches[0]:e;\n    x0=active.clientX;\n    y0=active.clientY;\n    e.preventDefault();\n    interact();\n};\nonpointermove=onmousemove=ontouchmove=function(e){\n    if (!active || !ready) return\nif (!e.buttons) {\n  active=false;\n  return;\n}\n    var touches=e.changedTouches;\n    if (active.identifier!==undefined && e.type!='touchmove') return;\n    if (touches) {\n        if (touches[0].identifier==active.identifier) e=touches[0]\n        else return\n    }\n    else {e.preventDefault()};\n    //if (e.type==mousemove && !e.which) return\n    dx=(5*dx+x0-(x0=e.clientX))/6;\n    dy=(5*dy+y0-(y0=e.clientY))/6;\n    //console.log(e.type, active.identifier, dx, x0)\n    interact();\n    ready=0;\n};\nonmouseup=onpointerup=ontouchup=ontouchcancel=onpointercancel=onblur=function(e){\n    active=false;\n    //console.log()\n    interact();\n}\n\nvar t0=new Date()*1, dMax=80, dMin=1000/33, dT=1000/50, af, Pactive=[], m=3000000, k=400, k0=1, f0=.01, fv=1000,\n    posArr=bGeometry.attributes.position.array,\n    pUp=0, pDn=[], flTimer=[], vecTest=new THREE.Vector3(), transStart, pLast, transactions=[];\nrequestAnimationFrame(function animate() {\n    requestAnimationFrame( animate );\n    var t=new Date()*1, dt=t-t0;\n    if (dt<dMin) return; // !Eh || \n    dt=Math.min(dt, dMax);\n    t0=t;\n    var dd=dt/dT;\n    var pos=canvas.getBoundingClientRect(), dY=window.innerHeight-document.documentElement.getBoundingClientRect().bottom;\n    if (pos.bottom<=0 || pos.top>=window.innerHeight) return;\n    if (dpr!=(dpr=window.devicePixelRatio) || W!=(W=window.innerWidth) || H!=(H=window.innerHeight)) {\n        vMin=Math.min(W,H);\n        renderer.setSize(W, H);\n        renderer.setPixelRatio( dpr );\n        camera.aspect=W/H;\n        camera.updateProjectionMatrix();\n    }\n    var addPoints=[];\n    activePoints.forEach(function(point, i){\n        var b=point.brightness;\n        if (point.isActive && (b+=(point.speed||.3)*(b+.05)*dd) >1) {//\n            point.siblings.forEach(function(s, j){\n                if ( activePoints.indexOf(s)>-1) return //console.log(11);\n                s.speed=3.7/point.distances[j];\n                //s.from=point;\n                if (s.isActive=(Math.random()>.6)) activePoints.push(s);\n            })\n            point.isActive=0;\n        } else if (!point.isActive && (b-=b*.056*dd) < 0.005) {\n            b=0;//point.from=\n            activePoints.splice(i,1)\n        }\n        point.brightness=b;\n        point.indexes.forEach(function(i){\n            brights[i]=b;\n        });\n    });\n    points.forEach(function(point, i){\n        var d=0;\n        point.siblings.forEach(function(s,j){d+=s.dr;});\n        d=d/point.siblings.length-point.dr;\n        point.f=-(activeF[i]||0)*.4+d*k-point.dr*k0*(1+Math.abs(1-point.r))-point.v*fv;\n        point.v+=point.f*dt/m;\n        point.r=1+point.dr;\n        point.indexes.forEach(function(j){\n            //brights[i]+=point.f; return;\n            posArr[j*=3]=point.r*point.pos.x;\n            posArr[j+1]=point.r*point.pos.y;\n            posArr[j+2]=point.r*point.pos.z;\n        });\n    });\n    points.forEach(function(point, i){\n        if (!point.v) return;\n        var dd=point.v*dt;\n        point.dr+=dd;\n    });\n    bGeometry.attributes.bright.needsUpdate=true;\n    bGeometry.attributes.position.needsUpdate=true;\n    camera.position.z += (posZ - camera.position.z ) * .085*dd;\n    ro1+=roV1*dd; ro2+=roV2*dd;\n    particles.rotation.set(0,0,0);\n    particles.rotateY(ro2).rotateX(obliquity).rotateY(ro1);\n    particles.rotation.y-=.0009\n\n    dx*=(1-.03*dd);\n    dy*=(1-.03*dd);\n    ro2-=dx*.002;//+(W/2-y0)*(W/2-x0)*dy/vMin*.00004;\n    world.rotation.x-=dy*.002;\n    var sro=world.rotation.x*=.92;\n    Net.applyMatrix(new THREE.Matrix4().getInverse(particles.matrixWorld).multiply(\n            new THREE.Matrix4().makeRotationFromEuler(new THREE.Euler(-dy*.003, -dx*.002,0))\n        ).multiply(particles.matrixWorld)//new THREE.Matrix4()\n    );\n    Earth.visible=!1;\n    scene.scale.set(.33,.33, .65)//.applyEuler(new THREE.Euler(-sro,0,0))\n    cubeCamera.update( renderer, scene );\n    Earth.visible=!0;\n    scene.scale.set(1,1,1)\n    particles.matrixWorldNeedsUpdate=true;\n    renderer.render( scene, camera );\n    ready=1;\n})\n//})()\n    }\n    \n    render() {\n        return (\n            <div>\n                <canvas id=\"earth\"></canvas>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}