{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar _jsxFileName = \"/Users/imac/Desktop/APADANA/components/Earth.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nexport default class Earth extends Component {\n  componentDidMount() {\n    //(function(){\n    var AMOUNT = 200,\n        d = 25,\n        R = 200,\n        adjustment = true,\n        adaptive = true,\n        obliquity = 23 / 180 * 3.14,\n        roV1 = 0.0022,\n        roV2 = -0.0005,\n        ro1 = 0,\n        ro2 = 0,\n        canvas = \"#earth\",\n        color = \"#420236\",\n        fogC = \"#722779\",\n        T_earth = \"https://mapplix.github.io/earth/earth.png\";\n    var camera, scene, renderer;\n    var positions = [],\n        particles,\n        particle,\n        count = 0,\n        dpr,\n        lastW,\n        W = window.innerWidth,\n        H = window.innerHeight,\n        aspect = W / H,\n        vMin = Math.min(W, H);\n    var mouseX = 0,\n        mouseY = 0,\n        x0,\n        y0;\n    var lookAt = new THREE.Vector3(0, 0, 0),\n        canvas = document.querySelector(canvas);\n    renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      antialias: true,\n      canvas: canvas\n    }); //\n\n    renderer.setSize(W, H); //renderer.context.getExtension('OES_standard_derivatives');\n\n    camera = new THREE.PerspectiveCamera(18, aspect, 1, 10000);\n    scene = new THREE.Scene();\n    var Emap = new THREE.TextureLoader().load(T_earth);\n    Emap.anisotropy = Math.min(8, renderer.capabilities.getMaxAnisotropy()) || 1;\n    var Wmaterial = new THREE.MeshStandardMaterial({\n      onBeforeCompile: function (sh) {\n        sh.vertexShader = \"\\\n#define MYSHADER\\n\\\nattribute float center, bright;\\n\\\nvarying vec3 vCenter, vPos, vV0, vV1, vV2;\\n\\\nvarying float vBright;\\n\\\n\" + sh.vertexShader.replace(/}\\s*$/, \"\\\nvBright=bright;\\n\\\nint c=int(center);\\n\\\nvCenter = vec3(c==0, c==1, c==2);\\n\\\nvPos=position;\\n\\\ngl_Position = projectionMatrix * modelViewMatrix * vec4(vPos, 1);\\n\\\nvV0=vCenter[0]*vPos;\\n\\\nvV1=vCenter[1]*vPos;\\n\\\nvV2=vCenter[2]*vPos;\\n\\\n}\t\t\t\");\n        sh.fragmentShader = \"\\\n#define MYSHADER\\n\\\nvarying vec3 vCenter, vPos, vV0, vV1, vV2;\\n\\\nvarying float vBright;\\n\\\n\" + sh.fragmentShader.replace(\"#include <alphamap_fragment>\", \"\\\n#include <alphamap_fragment>\\n\\\nvec3 d = fwidth( vCenter );\\n\\\nvec3 a3 = smoothstep( vec3(0.0), d * 1.4, vCenter+0.4*d-1.0/fogDepth );\\n\\\nfloat scale = dot(normalize(vViewPosition), vNormal);\\n\\\nscale = 1.0-scale*scale;\\n\\\nfloat dist = distance(vPos, vV0.xyz/vCenter.x);\\n\\\ndist = min(dist, distance(vPos, vV1.xyz/vCenter.y));\\n\\\ndist = min(dist, distance(vPos, vV2.xyz/vCenter.z));\\n\\\nfloat b3 = smoothstep(1.5, 1.8, dist-1.5*scale*scale );\\n\\\nfloat edgeFactorTri=min(b3,min( min( a3.x, a3.y ), a3.z ));\\n\\\ndiffuseColor.a *= mix( 1.0,  0.0, edgeFactorTri );\\n\\\nfloat dissipation=\" + (posZ + 0.5 * R + 0.01) + \";\\n\\\ndiffuseColor.a *= smoothstep( 20.0,  0.0, fogDepth-dissipation );\\n\\\n\t\t\t\").replace(\"\t#include <fog_fragment>\", \"\\\nfloat lVc=length(vCenter);\\n\\\ngl_FragColor.rgb *= smoothstep( \" + R * 0.8888 + \", \" + R * 1.201 + \", fogDepth );\\n\\\ngl_FragColor.rgb = mix( gl_FragColor.rgb, vec3(3), (.1*lVc+pow(lVc,8.0))*vBright );\\n\\\n#include <fog_fragment>\\\n\t\t\t\"); //console.log(sh, sh.vertexShader, sh.fragmentShader);\n      },\n      roughness: 0.5,\n      metalness: 0.964,\n      envMapIntensity: 5,\n      emissive: 0,\n      // refractionRatio: -0.12,\n      transparent: true,\n      alphaTest: 0.05\n    }); //, opacity: 0\n\n    Wmaterial.color.set(fogC);\n    Wmaterial.side = 2;\n    Wmaterial.extensions = {\n      derivatives: 1\n    };\n    var geometry = new THREE.IcosahedronGeometry(R, 3); //OctahedronGeometry\n\n    for (var i = 0; i < geometry.vertices.length; i++) {\n      geometry.vertices[i].applyEuler(new THREE.Euler(Math.random() * 0.06, Math.random() * 0.06, Math.random() * 0.06));\n    }\n\n    var bGeometry = new THREE.BufferGeometry().fromGeometry(geometry);\n    var position = bGeometry.attributes.position;\n    var centers = new Int8Array(position.count);\n    var brights = new Float32Array(position.count);\n    var points = [],\n        activePoints = [],\n        vCount = geometry.vertices.length,\n        dCount = 0,\n        dMid = 0;\n\n    for (var i = 0, l = position.count; i < l; i++) {\n      var c = centers[i] = i % 3,\n          j = (i - c) / 3;\n      brights[i] = 0;\n      if (i < vCount) points[i] = {\n        siblings: [],\n        distances: [],\n        indexes: [],\n        brightness: 0,\n        v: 0,\n        a: 0,\n        f: 0,\n        dr: 0,\n        r: 1\n      };\n    }\n\n    function addSiblings(a, b, one) {\n      if (points[a].siblings.indexOf(points[b]) < 0) {\n        points[a].pos = geometry.vertices[a].clone();\n        points[a].siblings.push(points[b]);\n        var d = geometry.vertices[a].distanceTo(geometry.vertices[b]);\n        points[a].distances.push(d);\n        dMid += d;\n        dCount++;\n      }\n\n      if (!one) addSiblings(b, a, 1);\n    }\n\n    geometry.faces.forEach(function (face, i) {\n      addSiblings(face.a, face.b);\n      addSiblings(face.a, face.c);\n      addSiblings(face.c, face.b);\n      points[face.a].indexes.push(i * 3);\n      points[face.b].indexes.push(i * 3 + 1);\n      points[face.c].indexes.push(i * 3 + 2);\n    });\n    dMid /= dCount;\n    var ttl = 10;\n\n    (function setActive(n) {\n      if (!n) return;\n\n      var i = _parseInt(Math.random() * vCount);\n\n      if (geometry.vertices[i].z < -100) setActive();else points[i].isActive = ttl, activePoints.push(points[i]);\n      setActive(n - 1);\n    })(10);\n\n    bGeometry.addAttribute(\"center\", new THREE.BufferAttribute(centers, 1));\n    bGeometry.addAttribute(\"bright\", new THREE.BufferAttribute(brights, 1));\n    var Ematerial = Wmaterial.clone();\n    Ematerial.alphaMap = Emap;\n    Ematerial.transparent = false;\n    Ematerial.side = 0;\n    var cubeCamera = new THREE.CubeCamera(1, 2 * R, 256);\n    cubeCamera.position.z = 0.47 * R;\n    Ematerial.envMap = cubeCamera.renderTarget.texture;\n    Ematerial.envMap.minFilter = THREE.LinearMipMapLinearFilter;\n    Ematerial.envMap.mapping = THREE.CubeReflectionMapping;\n    var Earth = new THREE.Mesh(new THREE.IcosahedronGeometry(R * 0.77, 3), Ematerial);\n    var wGeometry = geometry.clone();\n    particles = new THREE.Group();\n    let world = new THREE.Group();\n    var Net = new THREE.Mesh(bGeometry, Wmaterial);\n    particles.add(Net, Earth); //new THREE.Points(geometry, Pmaterial),\n    //particles.rotation.order='YXZ'\n\n    world.add(particles);\n    scene.add(world); // POSITIONS :\n\n    var posZ = 1700; //distance to camera\n    //scene.position.set(-12,54,0);\n    //camera.position.y=camera.position.z=2000\n\n    scene.fog = new THREE.Fog(fogC, posZ - R / 2, posZ + R);\n    let hLight = new THREE.HemisphereLight(\"#fff\", 0, 23);\n    world.add(hLight);\n    hLight.position.set(0, 0, 1); // interactions\n\n    var dx,\n        dy = dx = x0 = y0 = 0,\n        active,\n        abc = [\"a\", \"b\", \"c\"],\n        movedPoints = [],\n        activeF = [],\n        ready,\n        raycaster = new THREE.Raycaster(),\n        mouse = new THREE.Vector2();\n\n    window.getWpos = function () {\n      return [scene.position, scene.rotation, camera];\n    };\n\n    function interact() {\n      mouse.x = x0 / W * 2 - 1;\n      mouse.y = -(y0 / H) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      movedPoints.forEach(function (point, i) {\n        point.f = 0;\n      });\n      activeF = [];\n      if (!active) return;\n      var inters = raycaster.intersectObject(Net)[0],\n          ind,\n          vert;\n      if (!inters) return;\n      point = Net.worldToLocal(inters.point.clone());\n\n      for (var i = 0; i < 3; i++) {\n        ind = inters.face[abc[i]];\n        if (!points.some(function (p, i) {\n          return p.indexes.indexOf(ind) >= 0 && (vert = i + \"\");\n        })) return;\n        activeF[vert] = Math.max(1 - point.distanceTo(points[vert].pos) / dMid, 0) * 100;\n      } // console.log(activeF, points[vert]);\n\n    }\n\n    canvas.onpointerdown = canvas.onmousedown = canvas.ontouchstart = function (e) {\n      active = e.changedTouches ? e.changedTouches[0] : e;\n      x0 = active.clientX;\n      y0 = active.clientY;\n      e.preventDefault();\n      interact();\n    };\n\n    let onpointermove = onmousemove = ontouchmove = function (e) {\n      if (!active || !ready) return;\n\n      if (!e.buttons) {\n        active = false;\n        return;\n      }\n\n      var touches = e.changedTouches;\n      if (active.identifier !== undefined && e.type != \"touchmove\") return;\n\n      if (touches) {\n        if (touches[0].identifier == active.identifier) e = touches[0];else return;\n      } else {\n        e.preventDefault();\n      } //if (e.type==mousemove && !e.which) return\n\n\n      dx = (5 * dx + x0 - (x0 = e.clientX)) / 6;\n      dy = (5 * dy + y0 - (y0 = e.clientY)) / 6; //console.log(e.type, active.identifier, dx, x0)\n\n      interact();\n      ready = 0;\n    };\n\n    onmouseup = onpointerup = ontouchup = ontouchcancel = onpointercancel = onblur = function (e) {\n      active = false; //console.log()\n\n      interact();\n    };\n\n    var t0 = new Date() * 1,\n        dMax = 80,\n        dMin = 1000 / 33,\n        dT = 1000 / 50,\n        af,\n        Pactive = [],\n        m = 3000000,\n        k = 400,\n        k0 = 1,\n        f0 = 0.01,\n        fv = 1000,\n        posArr = bGeometry.attributes.position.array,\n        pUp = 0,\n        pDn = [],\n        flTimer = [],\n        vecTest = new THREE.Vector3(),\n        transStart,\n        pLast,\n        transactions = [];\n    requestAnimationFrame(function animate() {\n      requestAnimationFrame(animate);\n      var t = new Date() * 1,\n          dt = t - t0;\n      if (dt < dMin) return; // !Eh ||\n\n      dt = Math.min(dt, dMax);\n      t0 = t;\n      var dd = dt / dT;\n      var pos = canvas.getBoundingClientRect(),\n          dY = window.innerHeight - document.documentElement.getBoundingClientRect().bottom;\n      if (pos.bottom <= 0 || pos.top >= window.innerHeight) return;\n\n      if (dpr != (dpr = window.devicePixelRatio) || W != (W = window.innerWidth) || H != (H = window.innerHeight)) {\n        vMin = Math.min(W, H);\n        renderer.setSize(W, H);\n        renderer.setPixelRatio(dpr);\n        camera.aspect = W / H;\n        camera.updateProjectionMatrix();\n      }\n\n      var addPoints = [];\n      activePoints.forEach(function (point, i) {\n        var b = point.brightness;\n\n        if (point.isActive && (b += (point.speed || 0.3) * (b + 0.05) * dd) > 1) {\n          //\n          point.siblings.forEach(function (s, j) {\n            if (activePoints.indexOf(s) > -1) return; //console.log(11);\n\n            s.speed = 3.7 / point.distances[j]; //s.from=point;\n\n            if (s.isActive = Math.random() > 0.6) activePoints.push(s);\n          });\n          point.isActive = 0;\n        } else if (!point.isActive && (b -= b * 0.056 * dd) < 0.005) {\n          b = 0; //point.from=\n\n          activePoints.splice(i, 1);\n        }\n\n        point.brightness = b;\n        point.indexes.forEach(function (i) {\n          brights[i] = b;\n        });\n      });\n      points.forEach(function (point, i) {\n        var d = 0;\n        point.siblings.forEach(function (s, j) {\n          d += s.dr;\n        });\n        d = d / point.siblings.length - point.dr;\n        point.f = -(activeF[i] || 0) * 0.4 + d * k - point.dr * k0 * (1 + Math.abs(1 - point.r)) - point.v * fv;\n        point.v += point.f * dt / m;\n        point.r = 1 + point.dr;\n        point.indexes.forEach(function (j) {\n          //brights[i]+=point.f; return;\n          posArr[j *= 3] = point.r * point.pos.x;\n          posArr[j + 1] = point.r * point.pos.y;\n          posArr[j + 2] = point.r * point.pos.z;\n        });\n      });\n      points.forEach(function (point, i) {\n        if (!point.v) return;\n        var dd = point.v * dt;\n        point.dr += dd;\n      });\n      bGeometry.attributes.bright.needsUpdate = true;\n      bGeometry.attributes.position.needsUpdate = true;\n      camera.position.z += (posZ - camera.position.z) * 0.085 * dd;\n      ro1 += roV1 * dd;\n      ro2 += roV2 * dd;\n      particles.rotation.set(0, 0, 0);\n      particles.rotateY(ro2).rotateX(obliquity).rotateY(ro1);\n      particles.rotation.y -= 0.0009;\n      dx *= 1 - 0.03 * dd;\n      dy *= 1 - 0.03 * dd;\n      ro2 -= dx * 0.002; //+(W/2-y0)*(W/2-x0)*dy/vMin*.00004;\n\n      world.rotation.x -= dy * 0.002;\n      var sro = world.rotation.x *= 0.92;\n      Net.applyMatrix(new THREE.Matrix4().getInverse(particles.matrixWorld).multiply(new THREE.Matrix4().makeRotationFromEuler(new THREE.Euler(-dy * 0.003, -dx * 0.002, 0))).multiply(particles.matrixWorld) //new THREE.Matrix4()\n      );\n      Earth.visible = !1;\n      scene.scale.set(0.33, 0.33, 0.65); //.applyEuler(new THREE.Euler(-sro,0,0))\n\n      cubeCamera.update(renderer, scene);\n      Earth.visible = !0;\n      scene.scale.set(1, 1, 1);\n      particles.matrixWorldNeedsUpdate = true;\n      renderer.render(scene, camera);\n      ready = 1;\n    }); //})()\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, __jsx(\"script\", {\n      src: \"https://cdnjs.cloudflare.com/ajax/libs/three.js/108/three.min.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }), __jsx(\"canvas\", {\n      id: \"earth\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/imac/Desktop/APADANA/components/Earth.jsx"],"names":["React","Component","Earth","componentDidMount","AMOUNT","d","R","adjustment","adaptive","obliquity","roV1","roV2","ro1","ro2","canvas","color","fogC","T_earth","camera","scene","renderer","positions","particles","particle","count","dpr","lastW","W","window","innerWidth","H","innerHeight","aspect","vMin","Math","min","mouseX","mouseY","x0","y0","lookAt","THREE","Vector3","document","querySelector","WebGLRenderer","alpha","antialias","setSize","PerspectiveCamera","Scene","Emap","TextureLoader","load","anisotropy","capabilities","getMaxAnisotropy","Wmaterial","MeshStandardMaterial","onBeforeCompile","sh","vertexShader","replace","fragmentShader","posZ","roughness","metalness","envMapIntensity","emissive","transparent","alphaTest","set","side","extensions","derivatives","geometry","IcosahedronGeometry","i","vertices","length","applyEuler","Euler","random","bGeometry","BufferGeometry","fromGeometry","position","attributes","centers","Int8Array","brights","Float32Array","points","activePoints","vCount","dCount","dMid","l","c","j","siblings","distances","indexes","brightness","v","a","f","dr","r","addSiblings","b","one","indexOf","pos","clone","push","distanceTo","faces","forEach","face","ttl","setActive","n","z","isActive","addAttribute","BufferAttribute","Ematerial","alphaMap","cubeCamera","CubeCamera","envMap","renderTarget","texture","minFilter","LinearMipMapLinearFilter","mapping","CubeReflectionMapping","Mesh","wGeometry","Group","world","Net","add","fog","Fog","hLight","HemisphereLight","dx","dy","active","abc","movedPoints","activeF","ready","raycaster","Raycaster","mouse","Vector2","getWpos","rotation","interact","x","y","setFromCamera","point","inters","intersectObject","ind","vert","worldToLocal","some","p","max","onpointerdown","onmousedown","ontouchstart","e","changedTouches","clientX","clientY","preventDefault","onpointermove","onmousemove","ontouchmove","buttons","touches","identifier","undefined","type","onmouseup","onpointerup","ontouchup","ontouchcancel","onpointercancel","onblur","t0","Date","dMax","dMin","dT","af","Pactive","m","k","k0","f0","fv","posArr","array","pUp","pDn","flTimer","vecTest","transStart","pLast","transactions","requestAnimationFrame","animate","t","dt","dd","getBoundingClientRect","dY","documentElement","bottom","top","devicePixelRatio","setPixelRatio","updateProjectionMatrix","addPoints","speed","s","splice","abs","bright","needsUpdate","rotateY","rotateX","sro","applyMatrix","Matrix4","getInverse","matrixWorld","multiply","makeRotationFromEuler","visible","scale","update","matrixWorldNeedsUpdate","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Earth extends Component {\n  componentDidMount() {\n    //(function(){\n    var AMOUNT = 200,\n      d = 25,\n      R = 200,\n      adjustment = true,\n      adaptive = true,\n      obliquity = (23 / 180) * 3.14,\n      roV1 = 0.0022,\n      roV2 = -0.0005,\n      ro1 = 0,\n      ro2 = 0,\n      canvas = \"#earth\",\n      color = \"#420236\",\n      fogC = \"#722779\",\n      T_earth = \"https://mapplix.github.io/earth/earth.png\";\n\n    var camera, scene, renderer;\n\n    var positions = [],\n      particles,\n      particle,\n      count = 0,\n      dpr,\n      lastW,\n      W = window.innerWidth,\n      H = window.innerHeight,\n      aspect = W / H,\n      vMin = Math.min(W, H);\n\n    var mouseX = 0,\n      mouseY = 0,\n      x0,\n      y0;\n    var lookAt = new THREE.Vector3(0, 0, 0),\n      canvas = document.querySelector(canvas);\n\n    renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      antialias: true,\n      canvas: canvas\n    }); //\n    renderer.setSize(W, H);\n    //renderer.context.getExtension('OES_standard_derivatives');\n    camera = new THREE.PerspectiveCamera(18, aspect, 1, 10000);\n    scene = new THREE.Scene();\n    var Emap = new THREE.TextureLoader().load(T_earth);\n    Emap.anisotropy =\n      Math.min(8, renderer.capabilities.getMaxAnisotropy()) || 1;\n    var Wmaterial = new THREE.MeshStandardMaterial({\n      onBeforeCompile: function(sh) {\n        sh.vertexShader =\n          \"\\\n#define MYSHADER\\n\\\nattribute float center, bright;\\n\\\nvarying vec3 vCenter, vPos, vV0, vV1, vV2;\\n\\\nvarying float vBright;\\n\\\n\" +\n          sh.vertexShader.replace(\n            /}\\s*$/,\n            \"\\\nvBright=bright;\\n\\\nint c=int(center);\\n\\\nvCenter = vec3(c==0, c==1, c==2);\\n\\\nvPos=position;\\n\\\ngl_Position = projectionMatrix * modelViewMatrix * vec4(vPos, 1);\\n\\\nvV0=vCenter[0]*vPos;\\n\\\nvV1=vCenter[1]*vPos;\\n\\\nvV2=vCenter[2]*vPos;\\n\\\n}\t\t\t\"\n          );\n        sh.fragmentShader =\n          \"\\\n#define MYSHADER\\n\\\nvarying vec3 vCenter, vPos, vV0, vV1, vV2;\\n\\\nvarying float vBright;\\n\\\n\" +\n          sh.fragmentShader\n            .replace(\n              \"#include <alphamap_fragment>\",\n              \"\\\n#include <alphamap_fragment>\\n\\\nvec3 d = fwidth( vCenter );\\n\\\nvec3 a3 = smoothstep( vec3(0.0), d * 1.4, vCenter+0.4*d-1.0/fogDepth );\\n\\\nfloat scale = dot(normalize(vViewPosition), vNormal);\\n\\\nscale = 1.0-scale*scale;\\n\\\nfloat dist = distance(vPos, vV0.xyz/vCenter.x);\\n\\\ndist = min(dist, distance(vPos, vV1.xyz/vCenter.y));\\n\\\ndist = min(dist, distance(vPos, vV2.xyz/vCenter.z));\\n\\\nfloat b3 = smoothstep(1.5, 1.8, dist-1.5*scale*scale );\\n\\\nfloat edgeFactorTri=min(b3,min( min( a3.x, a3.y ), a3.z ));\\n\\\ndiffuseColor.a *= mix( 1.0,  0.0, edgeFactorTri );\\n\\\nfloat dissipation=\" +\n                (posZ + 0.5 * R + 0.01) +\n                \";\\n\\\ndiffuseColor.a *= smoothstep( 20.0,  0.0, fogDepth-dissipation );\\n\\\n\t\t\t\"\n            )\n            .replace(\n              \"\t#include <fog_fragment>\",\n              \"\\\nfloat lVc=length(vCenter);\\n\\\ngl_FragColor.rgb *= smoothstep( \" +\n                R * 0.8888 +\n                \", \" +\n                R * 1.201 +\n                \", fogDepth );\\n\\\ngl_FragColor.rgb = mix( gl_FragColor.rgb, vec3(3), (.1*lVc+pow(lVc,8.0))*vBright );\\n\\\n#include <fog_fragment>\\\n\t\t\t\"\n            );\n        //console.log(sh, sh.vertexShader, sh.fragmentShader);\n      },\n      roughness: 0.5,\n      metalness: 0.964,\n      envMapIntensity: 5,\n      emissive: 0,\n      // refractionRatio: -0.12,\n      transparent: true,\n      alphaTest: 0.05\n    }); //, opacity: 0\n    Wmaterial.color.set(fogC);\n    Wmaterial.side = 2;\n    Wmaterial.extensions = { derivatives: 1 };\n    var geometry = new THREE.IcosahedronGeometry(R, 3); //OctahedronGeometry\n\n    for (var i = 0; i < geometry.vertices.length; i++) {\n      geometry.vertices[i].applyEuler(\n        new THREE.Euler(\n          Math.random() * 0.06,\n          Math.random() * 0.06,\n          Math.random() * 0.06\n        )\n      );\n    }\n    var bGeometry = new THREE.BufferGeometry().fromGeometry(geometry);\n    var position = bGeometry.attributes.position;\n    var centers = new Int8Array(position.count);\n    var brights = new Float32Array(position.count);\n    var points = [],\n      activePoints = [],\n      vCount = geometry.vertices.length,\n      dCount = 0,\n      dMid = 0;\n\n    for (var i = 0, l = position.count; i < l; i++) {\n      var c = (centers[i] = i % 3),\n        j = (i - c) / 3;\n      brights[i] = 0;\n      if (i < vCount)\n        points[i] = {\n          siblings: [],\n          distances: [],\n          indexes: [],\n          brightness: 0,\n          v: 0,\n          a: 0,\n          f: 0,\n          dr: 0,\n          r: 1\n        };\n    }\n    function addSiblings(a, b, one) {\n      if (points[a].siblings.indexOf(points[b]) < 0) {\n        points[a].pos = geometry.vertices[a].clone();\n        points[a].siblings.push(points[b]);\n        var d = geometry.vertices[a].distanceTo(geometry.vertices[b]);\n        points[a].distances.push(d);\n        dMid += d;\n        dCount++;\n      }\n      if (!one) addSiblings(b, a, 1);\n    }\n    geometry.faces.forEach(function(face, i) {\n      addSiblings(face.a, face.b);\n      addSiblings(face.a, face.c);\n      addSiblings(face.c, face.b);\n      points[face.a].indexes.push(i * 3);\n      points[face.b].indexes.push(i * 3 + 1);\n      points[face.c].indexes.push(i * 3 + 2);\n    });\n    dMid /= dCount;\n    var ttl = 10;\n    (function setActive(n) {\n      if (!n) return;\n      var i = parseInt(Math.random() * vCount);\n      if (geometry.vertices[i].z < -100) setActive();\n      else (points[i].isActive = ttl), activePoints.push(points[i]);\n      setActive(n - 1);\n    })(10);\n\n    bGeometry.addAttribute(\"center\", new THREE.BufferAttribute(centers, 1));\n    bGeometry.addAttribute(\"bright\", new THREE.BufferAttribute(brights, 1));\n\n    var Ematerial = Wmaterial.clone();\n    Ematerial.alphaMap = Emap;\n    Ematerial.transparent = false;\n    Ematerial.side = 0;\n    var cubeCamera = new THREE.CubeCamera(1, 2 * R, 256);\n    cubeCamera.position.z = 0.47 * R;\n    Ematerial.envMap = cubeCamera.renderTarget.texture;\n    Ematerial.envMap.minFilter = THREE.LinearMipMapLinearFilter;\n    Ematerial.envMap.mapping = THREE.CubeReflectionMapping;\n    var Earth = new THREE.Mesh(\n      new THREE.IcosahedronGeometry(R * 0.77, 3),\n      Ematerial\n    );\n    var wGeometry = geometry.clone();\n    particles = new THREE.Group();\n    let world = new THREE.Group();\n    var Net = new THREE.Mesh(bGeometry, Wmaterial);\n    particles.add(Net, Earth); //new THREE.Points(geometry, Pmaterial),\n    //particles.rotation.order='YXZ'\n    world.add(particles);\n    scene.add(world);\n    // POSITIONS :\n    var posZ = 1700; //distance to camera\n    //scene.position.set(-12,54,0);\n\n    //camera.position.y=camera.position.z=2000\n\n    scene.fog = new THREE.Fog(fogC, posZ - R / 2, posZ + R);\n    let hLight = new THREE.HemisphereLight(\"#fff\", 0, 23);\n    world.add(hLight);\n    hLight.position.set(0, 0, 1);\n\n    // interactions\n    var dx,\n      dy = (dx = x0 = y0 = 0),\n      active,\n      abc = [\"a\", \"b\", \"c\"],\n      movedPoints = [],\n      activeF = [],\n      ready,\n      raycaster = new THREE.Raycaster(),\n      mouse = new THREE.Vector2();\n    window.getWpos = function() {\n      return [scene.position, scene.rotation, camera];\n    };\n    function interact() {\n      mouse.x = (x0 / W) * 2 - 1;\n      mouse.y = -(y0 / H) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      movedPoints.forEach(function(point, i) {\n        point.f = 0;\n      });\n      activeF = [];\n      if (!active) return;\n      var inters = raycaster.intersectObject(Net)[0],\n        ind,\n        vert;\n      if (!inters) return;\n      point = Net.worldToLocal(inters.point.clone());\n      for (var i = 0; i < 3; i++) {\n        ind = inters.face[abc[i]];\n        if (\n          !points.some(function(p, i) {\n            return p.indexes.indexOf(ind) >= 0 && (vert = i + \"\");\n          })\n        )\n          return;\n        activeF[vert] =\n          Math.max(1 - point.distanceTo(points[vert].pos) / dMid, 0) * 100;\n      }\n      // console.log(activeF, points[vert]);\n    }\n    canvas.onpointerdown = canvas.onmousedown = canvas.ontouchstart = function(\n      e\n    ) {\n      active = e.changedTouches ? e.changedTouches[0] : e;\n      x0 = active.clientX;\n      y0 = active.clientY;\n      e.preventDefault();\n      interact();\n    };\n    let onpointermove = onmousemove = ontouchmove = function(e) {\n      if (!active || !ready) return;\n      if (!e.buttons) {\n        active = false;\n        return;\n      }\n      var touches = e.changedTouches;\n      if (active.identifier !== undefined && e.type != \"touchmove\") return;\n      if (touches) {\n        if (touches[0].identifier == active.identifier) e = touches[0];\n        else return;\n      } else {\n        e.preventDefault();\n      }\n      //if (e.type==mousemove && !e.which) return\n      dx = (5 * dx + x0 - (x0 = e.clientX)) / 6;\n      dy = (5 * dy + y0 - (y0 = e.clientY)) / 6;\n      //console.log(e.type, active.identifier, dx, x0)\n      interact();\n      ready = 0;\n    };\n    onmouseup = onpointerup = ontouchup = ontouchcancel = onpointercancel = onblur = function(\n      e\n    ) {\n      active = false;\n      //console.log()\n      interact();\n    };\n\n    var t0 = new Date() * 1,\n      dMax = 80,\n      dMin = 1000 / 33,\n      dT = 1000 / 50,\n      af,\n      Pactive = [],\n      m = 3000000,\n      k = 400,\n      k0 = 1,\n      f0 = 0.01,\n      fv = 1000,\n      posArr = bGeometry.attributes.position.array,\n      pUp = 0,\n      pDn = [],\n      flTimer = [],\n      vecTest = new THREE.Vector3(),\n      transStart,\n      pLast,\n      transactions = [];\n    requestAnimationFrame(function animate() {\n      requestAnimationFrame(animate);\n      var t = new Date() * 1,\n        dt = t - t0;\n      if (dt < dMin) return; // !Eh ||\n      dt = Math.min(dt, dMax);\n      t0 = t;\n      var dd = dt / dT;\n      var pos = canvas.getBoundingClientRect(),\n        dY =\n          window.innerHeight -\n          document.documentElement.getBoundingClientRect().bottom;\n      if (pos.bottom <= 0 || pos.top >= window.innerHeight) return;\n      if (\n        dpr != (dpr = window.devicePixelRatio) ||\n        W != (W = window.innerWidth) ||\n        H != (H = window.innerHeight)\n      ) {\n        vMin = Math.min(W, H);\n        renderer.setSize(W, H);\n        renderer.setPixelRatio(dpr);\n        camera.aspect = W / H;\n        camera.updateProjectionMatrix();\n      }\n      var addPoints = [];\n      activePoints.forEach(function(point, i) {\n        var b = point.brightness;\n        if (\n          point.isActive &&\n          (b += (point.speed || 0.3) * (b + 0.05) * dd) > 1\n        ) {\n          //\n          point.siblings.forEach(function(s, j) {\n            if (activePoints.indexOf(s) > -1) return; //console.log(11);\n            s.speed = 3.7 / point.distances[j];\n            //s.from=point;\n            if ((s.isActive = Math.random() > 0.6)) activePoints.push(s);\n          });\n          point.isActive = 0;\n        } else if (!point.isActive && (b -= b * 0.056 * dd) < 0.005) {\n          b = 0; //point.from=\n          activePoints.splice(i, 1);\n        }\n        point.brightness = b;\n        point.indexes.forEach(function(i) {\n          brights[i] = b;\n        });\n      });\n      points.forEach(function(point, i) {\n        var d = 0;\n        point.siblings.forEach(function(s, j) {\n          d += s.dr;\n        });\n        d = d / point.siblings.length - point.dr;\n        point.f =\n          -(activeF[i] || 0) * 0.4 +\n          d * k -\n          point.dr * k0 * (1 + Math.abs(1 - point.r)) -\n          point.v * fv;\n        point.v += (point.f * dt) / m;\n        point.r = 1 + point.dr;\n        point.indexes.forEach(function(j) {\n          //brights[i]+=point.f; return;\n          posArr[(j *= 3)] = point.r * point.pos.x;\n          posArr[j + 1] = point.r * point.pos.y;\n          posArr[j + 2] = point.r * point.pos.z;\n        });\n      });\n      points.forEach(function(point, i) {\n        if (!point.v) return;\n        var dd = point.v * dt;\n        point.dr += dd;\n      });\n      bGeometry.attributes.bright.needsUpdate = true;\n      bGeometry.attributes.position.needsUpdate = true;\n      camera.position.z += (posZ - camera.position.z) * 0.085 * dd;\n      ro1 += roV1 * dd;\n      ro2 += roV2 * dd;\n      particles.rotation.set(0, 0, 0);\n      particles\n        .rotateY(ro2)\n        .rotateX(obliquity)\n        .rotateY(ro1);\n      particles.rotation.y -= 0.0009;\n\n      dx *= 1 - 0.03 * dd;\n      dy *= 1 - 0.03 * dd;\n      ro2 -= dx * 0.002; //+(W/2-y0)*(W/2-x0)*dy/vMin*.00004;\n      world.rotation.x -= dy * 0.002;\n      var sro = (world.rotation.x *= 0.92);\n      Net.applyMatrix(\n        new THREE.Matrix4()\n          .getInverse(particles.matrixWorld)\n          .multiply(\n            new THREE.Matrix4().makeRotationFromEuler(\n              new THREE.Euler(-dy * 0.003, -dx * 0.002, 0)\n            )\n          )\n          .multiply(particles.matrixWorld) //new THREE.Matrix4()\n      );\n      Earth.visible = !1;\n      scene.scale.set(0.33, 0.33, 0.65); //.applyEuler(new THREE.Euler(-sro,0,0))\n      cubeCamera.update(renderer, scene);\n      Earth.visible = !0;\n      scene.scale.set(1, 1, 1);\n      particles.matrixWorldNeedsUpdate = true;\n      renderer.render(scene, camera);\n      ready = 1;\n    });\n    //})()\n  }\n\n  render() {\n    return (\n      <div>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/108/three.min.js\" />\n        <canvas id=\"earth\"></canvas>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}